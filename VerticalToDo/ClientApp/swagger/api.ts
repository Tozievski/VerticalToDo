// tslint:disable
/**
 * Vertical ToDo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesAccountsLogInRequest
 */
export interface VerticalToDoServicesFeaturesAccountsLogInRequest {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsLogInRequest
     */
    emailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsLogInRequest
     */
    password?: string | null;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesAccountsLogInResponse
 */
export interface VerticalToDoServicesFeaturesAccountsLogInResponse {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsLogInResponse
     */
    token?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsLogInResponse
     */
    expiryDate?: string;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsLogInResponse
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsLogInResponse
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesAccountsRegisterRequest
 */
export interface VerticalToDoServicesFeaturesAccountsRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterRequest
     */
    emailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterRequest
     */
    password?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterRequest
     */
    confirmPassword?: string | null;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesAccountsRegisterResponse
 */
export interface VerticalToDoServicesFeaturesAccountsRegisterResponse {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterResponse
     */
    token?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterResponse
     */
    expiryDate?: string;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterResponse
     */
    username?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesAccountsRegisterResponse
     */
    userId?: string;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosArchiveRequest
 */
export interface VerticalToDoServicesFeaturesToDosArchiveRequest {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosArchiveRequest
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosDetailsResponse
 */
export interface VerticalToDoServicesFeaturesToDosDetailsResponse {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosDetailsResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosDetailsResponse
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosDetailsResponse
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosDetailsResponse
     */
    dueDate?: string | null;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosListArchivedResponse
 */
export interface VerticalToDoServicesFeaturesToDosListArchivedResponse {
    /**
     * 
     * @type {Array<VerticalToDoServicesFeaturesToDosListArchivedResponseItem>}
     * @memberof VerticalToDoServicesFeaturesToDosListArchivedResponse
     */
    items?: Array<VerticalToDoServicesFeaturesToDosListArchivedResponseItem> | null;
    /**
     * 
     * @type {number}
     * @memberof VerticalToDoServicesFeaturesToDosListArchivedResponse
     */
    count?: number;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosListArchivedResponseItem
 */
export interface VerticalToDoServicesFeaturesToDosListArchivedResponseItem {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListArchivedResponseItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListArchivedResponseItem
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListArchivedResponseItem
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListArchivedResponseItem
     */
    dueDate?: string | null;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosListResponse
 */
export interface VerticalToDoServicesFeaturesToDosListResponse {
    /**
     * 
     * @type {Array<VerticalToDoServicesFeaturesToDosListResponseItem>}
     * @memberof VerticalToDoServicesFeaturesToDosListResponse
     */
    items?: Array<VerticalToDoServicesFeaturesToDosListResponseItem> | null;
    /**
     * 
     * @type {number}
     * @memberof VerticalToDoServicesFeaturesToDosListResponse
     */
    count?: number;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosListResponseItem
 */
export interface VerticalToDoServicesFeaturesToDosListResponseItem {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListResponseItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListResponseItem
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListResponseItem
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosListResponseItem
     */
    dueDate?: string | null;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosNewRequest
 */
export interface VerticalToDoServicesFeaturesToDosNewRequest {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosNewRequest
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosNewRequest
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosNewRequest
     */
    dueDate?: string | null;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosNewResponse
 */
export interface VerticalToDoServicesFeaturesToDosNewResponse {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosNewResponse
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface VerticalToDoServicesFeaturesToDosUpdateRequest
 */
export interface VerticalToDoServicesFeaturesToDosUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosUpdateRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosUpdateRequest
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosUpdateRequest
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VerticalToDoServicesFeaturesToDosUpdateRequest
     */
    dueDate?: string | null;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VerticalToDoServicesFeaturesAccountsLogInRequest} [verticalToDoServicesFeaturesAccountsLogInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsLogInPost: async (verticalToDoServicesFeaturesAccountsLogInRequest?: VerticalToDoServicesFeaturesAccountsLogInRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accounts/LogIn`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof verticalToDoServicesFeaturesAccountsLogInRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verticalToDoServicesFeaturesAccountsLogInRequest !== undefined ? verticalToDoServicesFeaturesAccountsLogInRequest : {}) : (verticalToDoServicesFeaturesAccountsLogInRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesAccountsRegisterRequest} [verticalToDoServicesFeaturesAccountsRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsRegisterPost: async (verticalToDoServicesFeaturesAccountsRegisterRequest?: VerticalToDoServicesFeaturesAccountsRegisterRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Accounts/Register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof verticalToDoServicesFeaturesAccountsRegisterRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verticalToDoServicesFeaturesAccountsRegisterRequest !== undefined ? verticalToDoServicesFeaturesAccountsRegisterRequest : {}) : (verticalToDoServicesFeaturesAccountsRegisterRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VerticalToDoServicesFeaturesAccountsLogInRequest} [verticalToDoServicesFeaturesAccountsLogInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsLogInPost(verticalToDoServicesFeaturesAccountsLogInRequest?: VerticalToDoServicesFeaturesAccountsLogInRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerticalToDoServicesFeaturesAccountsLogInResponse>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).apiAccountsLogInPost(verticalToDoServicesFeaturesAccountsLogInRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesAccountsRegisterRequest} [verticalToDoServicesFeaturesAccountsRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsRegisterPost(verticalToDoServicesFeaturesAccountsRegisterRequest?: VerticalToDoServicesFeaturesAccountsRegisterRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerticalToDoServicesFeaturesAccountsRegisterResponse>> {
            const localVarAxiosArgs = await AccountsApiAxiosParamCreator(configuration).apiAccountsRegisterPost(verticalToDoServicesFeaturesAccountsRegisterRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {VerticalToDoServicesFeaturesAccountsLogInRequest} [verticalToDoServicesFeaturesAccountsLogInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsLogInPost(verticalToDoServicesFeaturesAccountsLogInRequest?: VerticalToDoServicesFeaturesAccountsLogInRequest, options?: any): AxiosPromise<VerticalToDoServicesFeaturesAccountsLogInResponse> {
            return AccountsApiFp(configuration).apiAccountsLogInPost(verticalToDoServicesFeaturesAccountsLogInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesAccountsRegisterRequest} [verticalToDoServicesFeaturesAccountsRegisterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsRegisterPost(verticalToDoServicesFeaturesAccountsRegisterRequest?: VerticalToDoServicesFeaturesAccountsRegisterRequest, options?: any): AxiosPromise<VerticalToDoServicesFeaturesAccountsRegisterResponse> {
            return AccountsApiFp(configuration).apiAccountsRegisterPost(verticalToDoServicesFeaturesAccountsRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @param {VerticalToDoServicesFeaturesAccountsLogInRequest} [verticalToDoServicesFeaturesAccountsLogInRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsLogInPost(verticalToDoServicesFeaturesAccountsLogInRequest?: VerticalToDoServicesFeaturesAccountsLogInRequest, options?: any) {
        return AccountsApiFp(this.configuration).apiAccountsLogInPost(verticalToDoServicesFeaturesAccountsLogInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerticalToDoServicesFeaturesAccountsRegisterRequest} [verticalToDoServicesFeaturesAccountsRegisterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public apiAccountsRegisterPost(verticalToDoServicesFeaturesAccountsRegisterRequest?: VerticalToDoServicesFeaturesAccountsRegisterRequest, options?: any) {
        return AccountsApiFp(this.configuration).apiAccountsRegisterPost(verticalToDoServicesFeaturesAccountsRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ToDosApi - axios parameter creator
 * @export
 */
export const ToDosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosArchiveRequest} [verticalToDoServicesFeaturesToDosArchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosArchivePost: async (verticalToDoServicesFeaturesToDosArchiveRequest?: VerticalToDoServicesFeaturesToDosArchiveRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDos/Archive`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof verticalToDoServicesFeaturesToDosArchiveRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verticalToDoServicesFeaturesToDosArchiveRequest !== undefined ? verticalToDoServicesFeaturesToDosArchiveRequest : {}) : (verticalToDoServicesFeaturesToDosArchiveRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosDetailsGet: async (id?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDos/Details`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosListArchivedGet: async (pageNumber?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDos/ListArchived`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosListGet: async (pageNumber?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDos/List`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosNewRequest} [verticalToDoServicesFeaturesToDosNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosNewPost: async (verticalToDoServicesFeaturesToDosNewRequest?: VerticalToDoServicesFeaturesToDosNewRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDos/New`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof verticalToDoServicesFeaturesToDosNewRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verticalToDoServicesFeaturesToDosNewRequest !== undefined ? verticalToDoServicesFeaturesToDosNewRequest : {}) : (verticalToDoServicesFeaturesToDosNewRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosUpdateRequest} [verticalToDoServicesFeaturesToDosUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosUpdatePost: async (verticalToDoServicesFeaturesToDosUpdateRequest?: VerticalToDoServicesFeaturesToDosUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ToDos/Update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof verticalToDoServicesFeaturesToDosUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(verticalToDoServicesFeaturesToDosUpdateRequest !== undefined ? verticalToDoServicesFeaturesToDosUpdateRequest : {}) : (verticalToDoServicesFeaturesToDosUpdateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToDosApi - functional programming interface
 * @export
 */
export const ToDosApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosArchiveRequest} [verticalToDoServicesFeaturesToDosArchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDosArchivePost(verticalToDoServicesFeaturesToDosArchiveRequest?: VerticalToDoServicesFeaturesToDosArchiveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ToDosApiAxiosParamCreator(configuration).apiToDosArchivePost(verticalToDoServicesFeaturesToDosArchiveRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDosDetailsGet(id?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerticalToDoServicesFeaturesToDosDetailsResponse>> {
            const localVarAxiosArgs = await ToDosApiAxiosParamCreator(configuration).apiToDosDetailsGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDosListArchivedGet(pageNumber?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerticalToDoServicesFeaturesToDosListArchivedResponse>> {
            const localVarAxiosArgs = await ToDosApiAxiosParamCreator(configuration).apiToDosListArchivedGet(pageNumber, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDosListGet(pageNumber?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerticalToDoServicesFeaturesToDosListResponse>> {
            const localVarAxiosArgs = await ToDosApiAxiosParamCreator(configuration).apiToDosListGet(pageNumber, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosNewRequest} [verticalToDoServicesFeaturesToDosNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDosNewPost(verticalToDoServicesFeaturesToDosNewRequest?: VerticalToDoServicesFeaturesToDosNewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerticalToDoServicesFeaturesToDosNewResponse>> {
            const localVarAxiosArgs = await ToDosApiAxiosParamCreator(configuration).apiToDosNewPost(verticalToDoServicesFeaturesToDosNewRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosUpdateRequest} [verticalToDoServicesFeaturesToDosUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiToDosUpdatePost(verticalToDoServicesFeaturesToDosUpdateRequest?: VerticalToDoServicesFeaturesToDosUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ToDosApiAxiosParamCreator(configuration).apiToDosUpdatePost(verticalToDoServicesFeaturesToDosUpdateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ToDosApi - factory interface
 * @export
 */
export const ToDosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosArchiveRequest} [verticalToDoServicesFeaturesToDosArchiveRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosArchivePost(verticalToDoServicesFeaturesToDosArchiveRequest?: VerticalToDoServicesFeaturesToDosArchiveRequest, options?: any): AxiosPromise<object> {
            return ToDosApiFp(configuration).apiToDosArchivePost(verticalToDoServicesFeaturesToDosArchiveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosDetailsGet(id?: string, options?: any): AxiosPromise<VerticalToDoServicesFeaturesToDosDetailsResponse> {
            return ToDosApiFp(configuration).apiToDosDetailsGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosListArchivedGet(pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<VerticalToDoServicesFeaturesToDosListArchivedResponse> {
            return ToDosApiFp(configuration).apiToDosListArchivedGet(pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosListGet(pageNumber?: number, pageSize?: number, options?: any): AxiosPromise<VerticalToDoServicesFeaturesToDosListResponse> {
            return ToDosApiFp(configuration).apiToDosListGet(pageNumber, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosNewRequest} [verticalToDoServicesFeaturesToDosNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosNewPost(verticalToDoServicesFeaturesToDosNewRequest?: VerticalToDoServicesFeaturesToDosNewRequest, options?: any): AxiosPromise<VerticalToDoServicesFeaturesToDosNewResponse> {
            return ToDosApiFp(configuration).apiToDosNewPost(verticalToDoServicesFeaturesToDosNewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {VerticalToDoServicesFeaturesToDosUpdateRequest} [verticalToDoServicesFeaturesToDosUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiToDosUpdatePost(verticalToDoServicesFeaturesToDosUpdateRequest?: VerticalToDoServicesFeaturesToDosUpdateRequest, options?: any): AxiosPromise<object> {
            return ToDosApiFp(configuration).apiToDosUpdatePost(verticalToDoServicesFeaturesToDosUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToDosApi - object-oriented interface
 * @export
 * @class ToDosApi
 * @extends {BaseAPI}
 */
export class ToDosApi extends BaseAPI {
    /**
     * 
     * @param {VerticalToDoServicesFeaturesToDosArchiveRequest} [verticalToDoServicesFeaturesToDosArchiveRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDosApi
     */
    public apiToDosArchivePost(verticalToDoServicesFeaturesToDosArchiveRequest?: VerticalToDoServicesFeaturesToDosArchiveRequest, options?: any) {
        return ToDosApiFp(this.configuration).apiToDosArchivePost(verticalToDoServicesFeaturesToDosArchiveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDosApi
     */
    public apiToDosDetailsGet(id?: string, options?: any) {
        return ToDosApiFp(this.configuration).apiToDosDetailsGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDosApi
     */
    public apiToDosListArchivedGet(pageNumber?: number, pageSize?: number, options?: any) {
        return ToDosApiFp(this.configuration).apiToDosListArchivedGet(pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDosApi
     */
    public apiToDosListGet(pageNumber?: number, pageSize?: number, options?: any) {
        return ToDosApiFp(this.configuration).apiToDosListGet(pageNumber, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerticalToDoServicesFeaturesToDosNewRequest} [verticalToDoServicesFeaturesToDosNewRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDosApi
     */
    public apiToDosNewPost(verticalToDoServicesFeaturesToDosNewRequest?: VerticalToDoServicesFeaturesToDosNewRequest, options?: any) {
        return ToDosApiFp(this.configuration).apiToDosNewPost(verticalToDoServicesFeaturesToDosNewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VerticalToDoServicesFeaturesToDosUpdateRequest} [verticalToDoServicesFeaturesToDosUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDosApi
     */
    public apiToDosUpdatePost(verticalToDoServicesFeaturesToDosUpdateRequest?: VerticalToDoServicesFeaturesToDosUpdateRequest, options?: any) {
        return ToDosApiFp(this.configuration).apiToDosUpdatePost(verticalToDoServicesFeaturesToDosUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


